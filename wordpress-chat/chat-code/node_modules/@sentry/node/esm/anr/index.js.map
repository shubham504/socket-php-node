{"version":3,"file":"index.js","sources":["../../../src/anr/index.ts"],"sourcesContent":["import type { Event, StackFrame } from '@sentry/types';\nimport { logger, watchdogTimer } from '@sentry/utils';\nimport { spawn } from 'child_process';\n\nimport { addGlobalEventProcessor, captureEvent, flush } from '..';\nimport { captureStackTrace } from './debugger';\n\nconst DEFAULT_INTERVAL = 50;\nconst DEFAULT_HANG_THRESHOLD = 5000;\n\ninterface Options {\n  /**\n   * The app entry script. This is used to run the same script as the child process.\n   *\n   * Defaults to `process.argv[1]`.\n   */\n  entryScript: string;\n  /**\n   * Interval to send heartbeat messages to the child process.\n   *\n   * Defaults to 50ms.\n   */\n  pollInterval: number;\n  /**\n   * Threshold in milliseconds to trigger an ANR event.\n   *\n   * Defaults to 5000ms.\n   */\n  anrThreshold: number;\n  /**\n   * Whether to capture a stack trace when the ANR event is triggered.\n   *\n   * Defaults to `false`.\n   *\n   * This uses the node debugger which enables the inspector API and opens the required ports.\n   */\n  captureStackTrace: boolean;\n  /**\n   * @deprecated Use 'init' debug option instead\n   */\n  debug: boolean;\n}\n\nfunction sendEvent(blockedMs: number, frames?: StackFrame[]): void {\n  const event: Event = {\n    level: 'error',\n    exception: {\n      values: [\n        {\n          type: 'ApplicationNotResponding',\n          value: `Application Not Responding for at least ${blockedMs} ms`,\n          stacktrace: { frames },\n          mechanism: {\n            // This ensures the UI doesn't say 'Crashed in' for the stack trace\n            type: 'ANR',\n          },\n        },\n      ],\n    },\n  };\n\n  captureEvent(event);\n\n  void flush(3000).then(() => {\n    // We only capture one event to avoid spamming users with errors\n    process.exit();\n  });\n}\n\ninterface InspectorApi {\n  open: (port: number) => void;\n  url: () => string | undefined;\n}\n\n/**\n * Starts the node debugger and returns the inspector url.\n *\n * When inspector.url() returns undefined, it means the port is already in use so we try the next port.\n */\nfunction startInspector(startPort: number = 9229): string | undefined {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const inspector: InspectorApi = require('inspector');\n  let inspectorUrl: string | undefined = undefined;\n  let port = startPort;\n\n  while (inspectorUrl === undefined && port < startPort + 100) {\n    inspector.open(port);\n    inspectorUrl = inspector.url();\n    port++;\n  }\n\n  return inspectorUrl;\n}\n\nfunction startChildProcess(options: Options): void {\n  function log(message: string, ...args: unknown[]): void {\n    logger.log(`[ANR] ${message}`, ...args);\n  }\n\n  try {\n    const env = { ...process.env };\n    env.SENTRY_ANR_CHILD_PROCESS = 'true';\n\n    if (options.captureStackTrace) {\n      env.SENTRY_INSPECT_URL = startInspector();\n    }\n\n    log(`Spawning child process with execPath:'${process.execPath}' and entryScript'${options.entryScript}'`);\n\n    const child = spawn(process.execPath, [options.entryScript], {\n      env,\n      stdio: logger.isEnabled() ? ['inherit', 'inherit', 'inherit', 'ipc'] : ['ignore', 'ignore', 'ignore', 'ipc'],\n    });\n    // The child process should not keep the main process alive\n    child.unref();\n\n    const timer = setInterval(() => {\n      try {\n        // message the child process to tell it the main event loop is still running\n        child.send('ping');\n      } catch (_) {\n        //\n      }\n    }, options.pollInterval);\n\n    const end = (type: string): ((...args: unknown[]) => void) => {\n      return (...args): void => {\n        clearInterval(timer);\n        log(`Child process ${type}`, ...args);\n      };\n    };\n\n    child.on('error', end('error'));\n    child.on('disconnect', end('disconnect'));\n    child.on('exit', end('exit'));\n  } catch (e) {\n    log('Failed to start child process', e);\n  }\n}\n\nfunction handleChildProcess(options: Options): void {\n  function log(message: string): void {\n    logger.log(`[ANR child process] ${message}`);\n  }\n\n  process.title = 'sentry-anr';\n\n  log('Started');\n\n  addGlobalEventProcessor(event => {\n    // Strip sdkProcessingMetadata from all child process events to remove trace info\n    delete event.sdkProcessingMetadata;\n    event.tags = {\n      ...event.tags,\n      'process.name': 'ANR',\n    };\n    return event;\n  });\n\n  let debuggerPause: Promise<() => void> | undefined;\n\n  // if attachStackTrace is enabled, we'll have a debugger url to connect to\n  if (process.env.SENTRY_INSPECT_URL) {\n    log('Connecting to debugger');\n\n    debuggerPause = captureStackTrace(process.env.SENTRY_INSPECT_URL, frames => {\n      log('Capturing event with stack frames');\n      sendEvent(options.anrThreshold, frames);\n    });\n  }\n\n  async function watchdogTimeout(): Promise<void> {\n    log('Watchdog timeout');\n    const pauseAndCapture = await debuggerPause;\n\n    if (pauseAndCapture) {\n      log('Pausing debugger to capture stack trace');\n      pauseAndCapture();\n    } else {\n      log('Capturing event');\n      sendEvent(options.anrThreshold);\n    }\n  }\n\n  const { poll } = watchdogTimer(options.pollInterval, options.anrThreshold, watchdogTimeout);\n\n  process.on('message', () => {\n    poll();\n  });\n}\n\n/**\n * Returns true if the current process is an ANR child process.\n */\nexport function isAnrChildProcess(): boolean {\n  return !!process.send && !!process.env.SENTRY_ANR_CHILD_PROCESS;\n}\n\n/**\n * **Note** This feature is still in beta so there may be breaking changes in future releases.\n *\n * Starts a child process that detects Application Not Responding (ANR) errors.\n *\n * It's important to await on the returned promise before your app code to ensure this code does not run in the ANR\n * child process.\n *\n * ```js\n * import { init, enableAnrDetection } from '@sentry/node';\n *\n * init({ dsn: \"__DSN__\" });\n *\n * // with ESM + Node 14+\n * await enableAnrDetection({ captureStackTrace: true });\n * runApp();\n *\n * // with CJS or Node 10+\n * enableAnrDetection({ captureStackTrace: true }).then(() => {\n *   runApp();\n * });\n * ```\n */\nexport function enableAnrDetection(options: Partial<Options>): Promise<void> {\n  // When pm2 runs the script in cluster mode, process.argv[1] is the pm2 script and process.env.pm_exec_path is the\n  // path to the entry script\n  const entryScript = options.entryScript || process.env.pm_exec_path || process.argv[1];\n\n  const anrOptions: Options = {\n    entryScript,\n    pollInterval: options.pollInterval || DEFAULT_INTERVAL,\n    anrThreshold: options.anrThreshold || DEFAULT_HANG_THRESHOLD,\n    captureStackTrace: !!options.captureStackTrace,\n    // eslint-disable-next-line deprecation/deprecation\n    debug: !!options.debug,\n  };\n\n  if (isAnrChildProcess()) {\n    handleChildProcess(anrOptions);\n    // In the child process, the promise never resolves which stops the app code from running\n    return new Promise<void>(() => {\n      // Never resolve\n    });\n  } else {\n    startChildProcess(anrOptions);\n    // In the main process, the promise resolves immediately\n    return Promise.resolve();\n  }\n}\n"],"names":[],"mappings":";;;;;AAOA,MAAA,gBAAA,GAAA,EAAA,CAAA;AACA,MAAA,sBAAA,GAAA,IAAA,CAAA;;AAmCA,SAAA,SAAA,CAAA,SAAA,EAAA,MAAA,EAAA;AACA,EAAA,MAAA,KAAA,GAAA;AACA,IAAA,KAAA,EAAA,OAAA;AACA,IAAA,SAAA,EAAA;AACA,MAAA,MAAA,EAAA;AACA,QAAA;AACA,UAAA,IAAA,EAAA,0BAAA;AACA,UAAA,KAAA,EAAA,CAAA,wCAAA,EAAA,SAAA,CAAA,GAAA,CAAA;AACA,UAAA,UAAA,EAAA,EAAA,MAAA,EAAA;AACA,UAAA,SAAA,EAAA;AACA;AACA,YAAA,IAAA,EAAA,KAAA;AACA,WAAA;AACA,SAAA;AACA,OAAA;AACA,KAAA;AACA,GAAA,CAAA;AACA;AACA,EAAA,YAAA,CAAA,KAAA,CAAA,CAAA;AACA;AACA,EAAA,KAAA,KAAA,CAAA,IAAA,CAAA,CAAA,IAAA,CAAA,MAAA;AACA;AACA,IAAA,OAAA,CAAA,IAAA,EAAA,CAAA;AACA,GAAA,CAAA,CAAA;AACA,CAAA;;AAOA;AACA;AACA;AACA;AACA;AACA,SAAA,cAAA,CAAA,SAAA,GAAA,IAAA,EAAA;AACA;AACA,EAAA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA,CAAA;AACA,EAAA,IAAA,YAAA,GAAA,SAAA,CAAA;AACA,EAAA,IAAA,IAAA,GAAA,SAAA,CAAA;AACA;AACA,EAAA,OAAA,YAAA,KAAA,SAAA,IAAA,IAAA,GAAA,SAAA,GAAA,GAAA,EAAA;AACA,IAAA,SAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;AACA,IAAA,YAAA,GAAA,SAAA,CAAA,GAAA,EAAA,CAAA;AACA,IAAA,IAAA,EAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA,OAAA,YAAA,CAAA;AACA,CAAA;AACA;AACA,SAAA,iBAAA,CAAA,OAAA,EAAA;AACA,EAAA,SAAA,GAAA,CAAA,OAAA,EAAA,GAAA,IAAA,EAAA;AACA,IAAA,MAAA,CAAA,GAAA,CAAA,CAAA,MAAA,EAAA,OAAA,CAAA,CAAA,EAAA,GAAA,IAAA,CAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA,IAAA;AACA,IAAA,MAAA,GAAA,GAAA,EAAA,GAAA,OAAA,CAAA,GAAA,EAAA,CAAA;AACA,IAAA,GAAA,CAAA,wBAAA,GAAA,MAAA,CAAA;AACA;AACA,IAAA,IAAA,OAAA,CAAA,iBAAA,EAAA;AACA,MAAA,GAAA,CAAA,kBAAA,GAAA,cAAA,EAAA,CAAA;AACA,KAAA;AACA;AACA,IAAA,GAAA,CAAA,CAAA,sCAAA,EAAA,OAAA,CAAA,QAAA,CAAA,kBAAA,EAAA,OAAA,CAAA,WAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA;AACA,IAAA,MAAA,KAAA,GAAA,KAAA,CAAA,OAAA,CAAA,QAAA,EAAA,CAAA,OAAA,CAAA,WAAA,CAAA,EAAA;AACA,MAAA,GAAA;AACA,MAAA,KAAA,EAAA,MAAA,CAAA,SAAA,EAAA,GAAA,CAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,KAAA,CAAA,GAAA,CAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,KAAA,CAAA;AACA,KAAA,CAAA,CAAA;AACA;AACA,IAAA,KAAA,CAAA,KAAA,EAAA,CAAA;AACA;AACA,IAAA,MAAA,KAAA,GAAA,WAAA,CAAA,MAAA;AACA,MAAA,IAAA;AACA;AACA,QAAA,KAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA;AACA,OAAA,CAAA,OAAA,CAAA,EAAA;AACA;AACA,OAAA;AACA,KAAA,EAAA,OAAA,CAAA,YAAA,CAAA,CAAA;AACA;AACA,IAAA,MAAA,GAAA,GAAA,CAAA,IAAA,KAAA;AACA,MAAA,OAAA,CAAA,GAAA,IAAA,KAAA;AACA,QAAA,aAAA,CAAA,KAAA,CAAA,CAAA;AACA,QAAA,GAAA,CAAA,CAAA,cAAA,EAAA,IAAA,CAAA,CAAA,EAAA,GAAA,IAAA,CAAA,CAAA;AACA,OAAA,CAAA;AACA,KAAA,CAAA;AACA;AACA,IAAA,KAAA,CAAA,EAAA,CAAA,OAAA,EAAA,GAAA,CAAA,OAAA,CAAA,CAAA,CAAA;AACA,IAAA,KAAA,CAAA,EAAA,CAAA,YAAA,EAAA,GAAA,CAAA,YAAA,CAAA,CAAA,CAAA;AACA,IAAA,KAAA,CAAA,EAAA,CAAA,MAAA,EAAA,GAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AACA,GAAA,CAAA,OAAA,CAAA,EAAA;AACA,IAAA,GAAA,CAAA,+BAAA,EAAA,CAAA,CAAA,CAAA;AACA,GAAA;AACA,CAAA;AACA;AACA,SAAA,kBAAA,CAAA,OAAA,EAAA;AACA,EAAA,SAAA,GAAA,CAAA,OAAA,EAAA;AACA,IAAA,MAAA,CAAA,GAAA,CAAA,CAAA,oBAAA,EAAA,OAAA,CAAA,CAAA,CAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA,OAAA,CAAA,KAAA,GAAA,YAAA,CAAA;AACA;AACA,EAAA,GAAA,CAAA,SAAA,CAAA,CAAA;AACA;AACA,EAAA,uBAAA,CAAA,KAAA,IAAA;AACA;AACA,IAAA,OAAA,KAAA,CAAA,qBAAA,CAAA;AACA,IAAA,KAAA,CAAA,IAAA,GAAA;AACA,MAAA,GAAA,KAAA,CAAA,IAAA;AACA,MAAA,cAAA,EAAA,KAAA;AACA,KAAA,CAAA;AACA,IAAA,OAAA,KAAA,CAAA;AACA,GAAA,CAAA,CAAA;AACA;AACA,EAAA,IAAA,aAAA,CAAA;AACA;AACA;AACA,EAAA,IAAA,OAAA,CAAA,GAAA,CAAA,kBAAA,EAAA;AACA,IAAA,GAAA,CAAA,wBAAA,CAAA,CAAA;AACA;AACA,IAAA,aAAA,GAAA,iBAAA,CAAA,OAAA,CAAA,GAAA,CAAA,kBAAA,EAAA,MAAA,IAAA;AACA,MAAA,GAAA,CAAA,mCAAA,CAAA,CAAA;AACA,MAAA,SAAA,CAAA,OAAA,CAAA,YAAA,EAAA,MAAA,CAAA,CAAA;AACA,KAAA,CAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA,eAAA,eAAA,GAAA;AACA,IAAA,GAAA,CAAA,kBAAA,CAAA,CAAA;AACA,IAAA,MAAA,eAAA,GAAA,MAAA,aAAA,CAAA;AACA;AACA,IAAA,IAAA,eAAA,EAAA;AACA,MAAA,GAAA,CAAA,yCAAA,CAAA,CAAA;AACA,MAAA,eAAA,EAAA,CAAA;AACA,KAAA,MAAA;AACA,MAAA,GAAA,CAAA,iBAAA,CAAA,CAAA;AACA,MAAA,SAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;AACA,KAAA;AACA,GAAA;AACA;AACA,EAAA,MAAA,EAAA,IAAA,EAAA,GAAA,aAAA,CAAA,OAAA,CAAA,YAAA,EAAA,OAAA,CAAA,YAAA,EAAA,eAAA,CAAA,CAAA;AACA;AACA,EAAA,OAAA,CAAA,EAAA,CAAA,SAAA,EAAA,MAAA;AACA,IAAA,IAAA,EAAA,CAAA;AACA,GAAA,CAAA,CAAA;AACA,CAAA;AACA;AACA;AACA;AACA;AACA,SAAA,iBAAA,GAAA;AACA,EAAA,OAAA,CAAA,CAAA,OAAA,CAAA,IAAA,IAAA,CAAA,CAAA,OAAA,CAAA,GAAA,CAAA,wBAAA,CAAA;AACA,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,kBAAA,CAAA,OAAA,EAAA;AACA;AACA;AACA,EAAA,MAAA,WAAA,GAAA,OAAA,CAAA,WAAA,IAAA,OAAA,CAAA,GAAA,CAAA,YAAA,IAAA,OAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA;AACA;AACA,EAAA,MAAA,UAAA,GAAA;AACA,IAAA,WAAA;AACA,IAAA,YAAA,EAAA,OAAA,CAAA,YAAA,IAAA,gBAAA;AACA,IAAA,YAAA,EAAA,OAAA,CAAA,YAAA,IAAA,sBAAA;AACA,IAAA,iBAAA,EAAA,CAAA,CAAA,OAAA,CAAA,iBAAA;AACA;AACA,IAAA,KAAA,EAAA,CAAA,CAAA,OAAA,CAAA,KAAA;AACA,GAAA,CAAA;AACA;AACA,EAAA,IAAA,iBAAA,EAAA,EAAA;AACA,IAAA,kBAAA,CAAA,UAAA,CAAA,CAAA;AACA;AACA,IAAA,OAAA,IAAA,OAAA,CAAA,MAAA;AACA;AACA,KAAA,CAAA,CAAA;AACA,GAAA,MAAA;AACA,IAAA,iBAAA,CAAA,UAAA,CAAA,CAAA;AACA;AACA,IAAA,OAAA,OAAA,CAAA,OAAA,EAAA,CAAA;AACA,GAAA;AACA;;;;"}